name: "Copy issues"
on:
  workflow_dispatch:

jobs:
  get-issue-labels:
    if: github.repository != 'yumemi-inc/android-engineer-codecheck'
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.output_label_data.outputs.value }}
    steps:
      - name: Getting Labels data
        id: get_label_data
        uses: octokit/request-action@v2.1.9
        with:
          route: GET /repos/yumemi-inc/android-engineer-codecheck/labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: output_label_data
        run: |
          result=$(echo '${{ steps.get_label_data.outputs.data }}' | sed -z 's/\n//g')
          echo "value=${result}" >> $GITHUB_OUTPUT

  create-issue-labels:
    needs: get-issue-labels
    runs-on: ubuntu-latest
    permissions:
      issues: write
    strategy:
      matrix:
        label: ${{ fromJson(needs.get-issue-labels.outputs.labels) }}
    steps:
      - name: Create a label
        uses: octokit/request-action@v2.1.9
        with:
          route: POST /repos/${{ github.repository }}/labels
          name: ${{ matrix.label.name }}
          color: ${{ matrix.label.color }}
          description: ${{ matrix.label.description }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  get-milestones:
    if: github.repository != 'yumemi-inc/android-engineer-codecheck'
    runs-on: ubuntu-latest
    outputs:
      milestones: ${{ steps.output_milestones_data.outputs.value }}
    steps:
      - name: Getting Milestones data
        id: get_milestones_data
        uses: octokit/request-action@v2.1.9
        with:
          route: GET /repos/yumemi-inc/android-engineer-codecheck/milestones
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: output_milestones_data
        run: |
          result=$(echo '${{ steps.get_milestones_data.outputs.data }}' | sed -z 's/\n//g')
          echo "value=${result}" >> $GITHUB_OUTPUT

  create-milestones:
    needs: get-milestones
    runs-on: ubuntu-latest
    permissions:
      issues: write
    strategy:
      matrix:
        milestone: ${{ fromJson(needs.get-milestones.outputs.milestones) }}
    steps:
      - name: Create a milestone
        uses: octokit/request-action@v2.1.9
        with:
          route: POST /repos/${{ github.repository }}/milestones
          title: ${{ matrix.milestone.title }}
          description: ${{ matrix.milestone.description }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  get-myrepo-milestones:
    needs: create-milestones
    runs-on: ubuntu-latest
    permissions:
      issues: read
    outputs:
      milestones: ${{ steps.output_milestones_data.outputs.value }}
    steps:
      - name: Getting Milestones data
        id: get_milestones_data
        uses: octokit/request-action@v2.1.9
        with:
          route: GET /repos/${{ github.repository }}/milestones
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: output_milestones_data
        run: |
          result=$(echo '${{ steps.get_milestones_data.outputs.data }}' | sed -z 's/\n//g')
          echo "value=${result}" >> $GITHUB_OUTPUT
  get-issues:
    if: github.repository != 'yumemi-inc/android-engineer-codecheck'
    runs-on: ubuntu-latest
    outputs:
      issues: ${{ steps.output_issues_data.outputs.value }}
    steps:
      - name: Getting issues data
        id: get_issues_data
        uses: octokit/request-action@v2.1.9
        with:
          route: GET /repos/yumemi-inc/android-engineer-codecheck/issues
          sort: created
          direction: asc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: output_issues_data
        run: |
          result=$(echo '${{ steps.get_issues_data.outputs.data }}' | jq -c '[.[] | select(has("milestone")) | select(.milestone != null)]')
          echo "value=${result}" >> $GITHUB_OUTPUT

  get-myrepo-issues:
    if: github.repository != 'yumemi-inc/android-engineer-codecheck'
    runs-on: ubuntu-latest
    permissions:
      issues: read
    outputs:
      issues: ${{ steps.output_issues_data.outputs.value }}
    steps:
      - name: Getting issues data
        id: get_issues_data
        uses: octokit/request-action@v2.1.9
        with:
          route: GET /repos/${{ github.repository }}/issues
          state: all
          per_page: 100
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: output_issues_data
        run: |
          result=$(echo '${{ steps.get_issues_data.outputs.data }}' | sed -z 's/\n//g')
          echo "value=${result}" >> $GITHUB_OUTPUT

  create-issues:
    needs: [ create-issue-labels, get-myrepo-milestones, get-issues, get-myrepo-issues ]
    runs-on: ubuntu-latest
    permissions:
      issues: write
    strategy:
      max-parallel: 1
      matrix:
        issue: ${{ fromJson(needs.get-issues.outputs.issues) }}
    steps:
      - name: Find milestone
        id: find-milestone
        run: |
          milestones='${{ needs.get-myrepo-milestones.outputs.milestones }}'
          milestone_number=$(echo ${milestones} | jq '.[] | select (.title=="${{ matrix.issue.milestone.title }}") | .number' )
          echo "number=${milestone_number}" >> $GITHUB_OUTPUT
      - name: Create a issue
        run: |
          body=$(echo '${{ matrix.issue.body }}')
          body="${body//$'\n'/\\n}"
          body="${body//$'\r'/\\r}"
          
          if [[ "$body" =~ '#'[0-9] ]]; then
              link=$(echo "$body" | grep -o -E "#[0-9]+")
              num=$(echo $link | tr -d '#')
          
              issues=$(echo '${{ needs.get-issues.outputs.issues }}' | jq '[ . as $d | keys[] | $d[.] + {index:.} ]')
              issue_index=$(echo "$issues" | jq ".[] | select (.number==${num}) | .index")
              my_issue_count=$(echo '${{ needs.get-myrepo-issues.outputs.issues }}' | jq '. | length')
          
              num=$(($issue_index+$my_issue_count+1))
              body=$(echo $body | sed "s/$link/#${num}/g")
          fi
          
          labels='${{ toJson(matrix.issue.labels.*.name) }}'
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            -d "{
              \"title\" : \"${{ matrix.issue.title }}\",
              \"body\" : \"$body\",
              \"labels\" : ${labels},
              \"milestone\" : ${{ steps.find-milestone.outputs.number }}
            }"
